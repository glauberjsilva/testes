package br.com.glauber.servicos;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ErrorCollector;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import br.com.glauber.entidades.Filme;
import br.com.glauber.entidades.Locacao;
import br.com.glauber.entidades.Usuario;
import br.com.glauber.exceptions.FilmeSemEstoqueException;
import br.com.glauber.exceptions.LocadoraException;


@RunWith(Parameterized.class)
public class CalculoValorLocacaoTest {

	private LocacaoService service;
	
	@Parameter
	public static List<Filme> filmes;
	@Parameter(value = 1)
	public static Double valorLocacao;
	
	@Rule
	public ErrorCollector error = new ErrorCollector();
	
	@Before
	public void setup() {
		this.service = new LocacaoService();
	}
	
	private static Filme filme1 = new Filme("Filme 1", 10, 10.00d);
	private static Filme filme2 = new Filme("Filme 2", 10, 10.00d);
	private static Filme filme3 = new Filme("Filme 3", 10, 10.00d);
    private static Filme filme4 = new Filme("Filme 4", 10, 10.00d); 
	private static Filme filme5 = new Filme("Filme 5", 10, 10.00d);
	private static Filme filme6 = new Filme("Filme 6", 10, 10.00d);
	
	
	@Parameters
	public static Collection<Object[]> getParametros() {
		return Arrays.asList(new Object[][] {
			{ Arrays.asList(filme1, filme2, filme3), 27.5 },
			{ Arrays.asList(filme1, filme2, filme3, filme4), 32.5d },
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5), 35.0d },
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5, filme6), 35.0d }
		});
	}
	
	/* Usando técnica Data Driven Test
	 * Teste orientado a Dados 
	 * */
	@Test
	public void deveraCalcularValorLocacaoConsiderandoDescontos() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(valorLocacao, locacao.getValor(), 0.01);
	}
	
	
	@Test
	public void deveraPagar50porcentoNoFilme4() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(valorLocacao, locacao.getValor(), 0.01);
	}

	@Test
	public void deveraPagar25porcentoNoFilme5() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);
		
		// Verificação
		Assert.assertEquals(valorLocacao, locacao.getValor(), 0.01);
		Assert.assertThat(locacao.getValor(), CoreMatchers.is(valorLocacao));
		assertThat(locacao.getValor(), is(valorLocacao));
		error.checkThat(locacao.getValor(), is(valorLocacao));
	}

	@Test
	public void deveraPagarNadaPeloFilme6() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");
		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(valorLocacao, locacao.getValor(), 0.01);
		Assert.assertThat(locacao.getValor(), CoreMatchers.is(valorLocacao)); /* Mais usada */
		assertThat(locacao.getValor(), is(valorLocacao));
		error.checkThat(locacao.getValor(), CoreMatchers.is(valorLocacao));
		error.checkThat(locacao.getValor(), is(equalTo(valorLocacao)));
	}
}
