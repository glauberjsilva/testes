package br.com.glauber.servicos;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ErrorCollector;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import br.com.glauber.entidades.Filme;
import br.com.glauber.entidades.Locacao;
import br.com.glauber.entidades.Usuario;
import br.com.glauber.exceptions.FilmeSemEstoqueException;
import br.com.glauber.exceptions.LocadoraException;

@RunWith(Parameterized.class)
public class CalculoValorLocacaoTest {
	private LocacaoService service;

	@Parameter
	private List<Filme> filmes;
	@Parameter(value = 1)
	private Double valorLocacao;

	@Rule
	public ErrorCollector error = new ErrorCollector();

	@Before
	public void setup() {
		this.service = new LocacaoService();
	}

	private static Filme filme1 = new Filme("Filme 1", 10, 4.00d);
	private static Filme filme2 = new Filme("Filme 2", 10, 4.00d);
	private static Filme filme3 = new Filme("Filme 3", 10, 4.00d);
	private static Filme filme4 = new Filme("Filme 4", 10, 4.00d);
	private static Filme filme5 = new Filme("Filme 5", 10, 4.00d);
	private static Filme filme6 = new Filme("Filme 6", 10, 4.00d);

	@Parameters
	public static Collection<Object[]> getParametros() {
		return Arrays.asList(new Object[][] { 
			{ Arrays.asList(filme1, filme2, filme3), 11d },
			{ Arrays.asList(filme1, filme2, filme3, filme4), 12d },
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5), 13d },
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5, filme6), 13d } 
		});
	}

	@Test
	public void deveraCalcularValorLocacaoConsiderandoDescontos() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(valorLocacao, locacao.getValor(), 0.01);
	}

}
