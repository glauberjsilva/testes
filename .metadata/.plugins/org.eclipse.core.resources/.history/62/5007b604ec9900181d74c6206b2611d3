package br.com.glauber.servicos;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;

public class CalculadoraMockArgumentCaptor {

	@Mock
	private CalculadoraService calcMock;
	
	@Spy
	private CalculadoraService calcSpy;
	
	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}
	
	@Test
	public void devoMostrarDiferencaEntreMockSpy() {
		Mockito.when(calcMock.somar(1, 2)).thenReturn(8);
		Mockito.when(calcSpy.somar(1, 2)).thenReturn(8);
		
		System.out.println("Mock: " +  calcMock.somar(1, 5)); //Retorna o valor padrão de um inteiro
		System.out.println("Spy: " + calcSpy.somar(1, 5)); // Retorna o resultado da execução do método
	}
	
	@Test
	public void devoMostrarDiferencaEntreMockSpy() {
		Mockito.when(calcMock.somar(1, 2)).thenCallRealMethod(); // Chama a impletação real do método
		Mockito.when(calcSpy.somar(1, 2)).thenReturn(8);
		
		System.out.println("Mock: " +  calcMock.somar(1, 5)); //Retorna o valor padrão de um inteiro
		System.out.println("Spy: " + calcSpy.somar(1, 5)); // Retorna o resultado da execução do método
	}
	
	@Test
	public void teste() {
		CalculadoraService calc = Mockito.mock(CalculadoraService.class);

		ArgumentCaptor<Integer> argCapt = ArgumentCaptor.forClass(Integer.class);
		Mockito.when(calc.somar(argCapt.capture(), argCapt.capture())).thenReturn(5);
		
		Assert.assertEquals(5, calc.somar(1, 1000));
	
		// Imprime os valores passados no método cal.somar(1, 1000)
		System.out.println(argCapt.getAllValues());
	}
}
