package br.com.glauber.servicos;

import static br.com.glauber.utils.DataUtils.isMesmaData;
import static br.com.glauber.utils.DataUtils.obterDataComDiferencaDias;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.assertThat;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.hamcrest.CoreMatchers;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ErrorCollector;
import org.junit.rules.ExpectedException;

import br.com.glauber.entidades.Filme;
import br.com.glauber.entidades.Locacao;
import br.com.glauber.entidades.Usuario;
import br.com.glauber.exceptions.FilmeSemEstoqueException;
import br.com.glauber.exceptions.LocadoraException;
import br.com.glauber.utils.DataUtils;

public class LocacaoTest {

	private LocacaoService service;

	@Rule
	public ErrorCollector error = new ErrorCollector();

	@Rule
	public ExpectedException exception = ExpectedException.none();

	@Before
	public void setup() {
		this.service = new LocacaoService();
		System.out.println("Before");
	}

	@After
	public void tearDown() {
		System.out.println("After");
	}

	@BeforeClass
	public static void setupClass() {
		System.out.println("Before Class");
	}

	@AfterClass
	public static void tearDownClass() {
		System.out.println("After Class");
	}

	@Test
	public void deveAlugarFilmeComSucesso() throws Exception {

		// Cenário
		Usuario usuario = new Usuario("Usuario 1");
		List<Filme> filmes = Arrays.asList(new Filme("Guerra nas estrelas", 1, 10.00d));

		// Ação
		Locacao locacao = service.alugarFilme(usuario, filmes);

		// Verificação JUnit
		Assert.assertEquals(10.00d, locacao.getValor(), 0.01);
		Assert.assertTrue(DataUtils.isMesmaData(locacao.getDataLocacao(), new Date()));
		Assert.assertTrue(DataUtils.isMesmaData(locacao.getDataRetorno(), DataUtils.obterDataComDiferencaDias(1)));

		// Verificação utilizando Fluente Interface através da API hamcrest (Matchers)
		// Usando import estatico para CoreMatchers
		// Verifique quê
		assertThat(locacao.getValor(), is(10.00)); // CoreMatchers.is();
		assertThat(locacao.getValor(), is(equalTo(10.00)));
		assertThat(locacao.getValor(), is(not(5.00)));
		assertThat(isMesmaData(locacao.getDataLocacao(), new Date()), is(true));
		assertThat(isMesmaData(locacao.getDataRetorno(), obterDataComDiferencaDias(1)), is(true));

		// Utilizando Role
		// indicado quando o teste tem o mesmo cenário e ações
		error.checkThat(locacao.getValor(), is(10.00)); // CoreMatchers.is();
		error.checkThat(locacao.getValor(), is(10.00)); // CoreMatchers.is();
		error.checkThat(locacao.getValor(), is(equalTo(10.00)));
		error.checkThat(locacao.getValor(), is(not(5.00)));
		error.checkThat(isMesmaData(locacao.getDataLocacao(), new Date()), is(true));
		error.checkThat(isMesmaData(locacao.getDataRetorno(), obterDataComDiferencaDias(1)), is(true));
	}

	@Test(expected = FilmeSemEstoqueException.class)
	public void naoDeveAlugarFilmeSemEstoque() throws Exception {
		// cenario
		Usuario usuario = new Usuario("Usuario 1");
		List<Filme> filmes = Arrays.asList(new Filme("Filme 2", 0, 4.0));

		// acao
		service.alugarFilme(usuario, filmes);
	}

	@Test
	public void naoDeveAlugarFilmeSemUsuario() throws FilmeSemEstoqueException {
		// cenario
		List<Filme> filmes = Arrays.asList(new Filme("Filme 2", 1, 4.0));

		try {
			// acao
			service.alugarFilme(null, filmes);
			Assert.fail(); // força parar o teste caso não seja lançado nenhuma exceção esperada
		} catch (LocadoraException e) {
			Assert.assertThat(e.getMessage(), CoreMatchers.is("Usuário vazio"));
		}

		// System.out.println("Somente esta forma de teste consegue seguir com o teste
		// após lançar a execeção");
	}

	@Test
	public void naoDeveAlugarFilmeSemFilme() throws FilmeSemEstoqueException, LocadoraException {
		// cenario
		Usuario usuario = new Usuario("Usuario 1");

		// Exception deve ficar antes da ação (chamada do método alugarFilmes)
		exception.expect(LocadoraException.class);
		exception.expectMessage("Filme vazio");

		// acao
		this.service.alugarFilme(usuario, null);
	}

	@Test
	public void deveraPagar75PorcentoNoFilme3() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		List<Filme> filmes = Arrays.asList(new Filme("Filme 1", 1, 10.00d), new Filme("Filme 2", 10, 10.00d),
				new Filme("Filme 3", 5, 10.0d));

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(27.5d, locacao.getValor(), 0.01);
	}

	@Test
	public void deveraPagar50porcentoNoFilme4() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		List<Filme> filmes = Arrays.asList(new Filme("Filme 1", 1, 10.00d), new Filme("Filme 2", 10, 10.00d),
				new Filme("Filme 3", 5, 10.0d), new Filme("Filme 4", 5, 10.0d));

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(32.5d, locacao.getValor(), 0.01);
	}

	@Test
	public void deveraPagar25porcentoNoFilme5() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		List<Filme> filmes = Arrays.asList(new Filme("Filme 1", 1, 10.00d), new Filme("Filme 2", 10, 10.00d),
				new Filme("Filme 3", 5, 10.0d), new Filme("Filme 4", 5, 10.0d), new Filme("Filme 5", 10, 10.0d));

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);
		
		// Verificação
		Assert.assertEquals(35.0d, locacao.getValor(), 0.01);
		Assert.assertThat(locacao.getValor(), CoreMatchers.is(35.0d));
		assertThat(locacao.getValor(), is(35.0d));
		error.checkThat(locacao.getValor(), is(35.0d));
	}

	@Test
	public void deveraPagarNadaPeloFilme6() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		List<Filme> filmes = Arrays.asList(
				new Filme("Filme 1", 1, 10.00d), 
				new Filme("Filme 2", 10, 10.00d),
				new Filme("Filme 3", 5, 10.0d), 
				new Filme("Filme 4", 5, 10.0d), 
				new Filme("Filme 5", 10, 10.0d),
				new Filme("Filme 6", 10, 10.0d));

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		// Verificação
		Assert.assertEquals(35.0d, locacao.getValor(), 0.01);
		Assert.assertThat(locacao.getValor(), CoreMatchers.is(35.0d)); /* Mais usada */
		assertThat(locacao.getValor(), is(35.0d));
		error.checkThat(locacao.getValor(), CoreMatchers.is(35.0d));
		error.checkThat(locacao.getValor(), is(equalTo(35.0d)));
	}
}
