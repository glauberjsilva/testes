package br.com.glauber.servicos;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ErrorCollector;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

import br.com.glauber.entidades.Filme;
import br.com.glauber.entidades.Locacao;
import br.com.glauber.entidades.Usuario;
import br.com.glauber.exceptions.FilmeSemEstoqueException;
import br.com.glauber.exceptions.LocadoraException;

/**
 * Usando Parameterize - é uma tecnica que permite gerar conjunto de dados de forma dinamica, reduzindo o código dúplicado nos testes
 * Visa reduzir repetição de dados
 * 
 * @author Glauber
 *
 */
@RunWith(Parameterized.class)
public class CalculoValorLocacaoTest {
	private LocacaoService service;

	@Parameter
	public List<Filme> filmes;
	
	@Parameter(value = 1)
	public Double valorLocacao;
	
	@Parameter(value = 2)
	public String cenario;

	@Rule
	public ErrorCollector error = new ErrorCollector();

	@Before
	public void setup() {
		this.service = new LocacaoService();
	}

	private static Filme filme1 = new Filme("Filme 1", 10, 4.00d);
	private static Filme filme2 = new Filme("Filme 2", 10, 4.00d);
	private static Filme filme3 = new Filme("Filme 3", 10, 4.00d);
	private static Filme filme4 = new Filme("Filme 4", 10, 4.00d);
	private static Filme filme5 = new Filme("Filme 5", 10, 4.00d);
	private static Filme filme6 = new Filme("Filme 6", 10, 4.00d);
	private static Filme filme7 = new Filme("Filme 1", 10, 4.00d);

	@Parameters(name = "Teste {index} = {2} --- Preço da Locação = {1}") // Imprime na console do JUnit
	public static Collection<Object[]> getParametros() {
		
		//Dados de entrada e saida respctivamente Filme e Valor da Locação
		return Arrays.asList(new Object[][] { 
			{ Arrays.asList(filme1, filme2), 8d, "2 Filmes: Não tem desconto" },
			{ Arrays.asList(filme1, filme2, filme3), 11d, "3 Filmes: 25%" },
			{ Arrays.asList(filme1, filme2, filme3, filme4), 13d, "4 Filmes: 50%" },
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5), 14d, "5 Filmes: 75%" }, 
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5, filme6), 14d, "6 Filmes: 100%" },
			{ Arrays.asList(filme1, filme2, filme3, filme4, filme5, filme6, filme7), 18d, "7 Filmes: Não tem desconto" } 
		});
	}

	@Test
	public void deveraCalcularValorLocacaoConsiderandoDescontos() throws FilmeSemEstoqueException, LocadoraException {
		// Cenário
		Usuario usuario = new Usuario("Usuario 1");

		// Ação
		Locacao locacao = this.service.alugarFilme(usuario, filmes);

		this.filmes = null;
		// Verificação
		Assert.assertEquals(valorLocacao, locacao.getValor(), 0.01);
	}

}
